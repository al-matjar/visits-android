plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    compileSdkVersion versions.compile_sdk
    defaultConfig {
        applicationId "com.hypertrack.logistics.android.github"
        minSdkVersion versions.min_sdk
        targetSdkVersion versions.target_sdk
        versionName "0.18.0-SNAPSHOT"
        versionCode codeFromVersionString(versionName)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resValue "string", "google_places_api_key", rootProject.properties.placesApiKey
        resValue "string", "branch_io_api_key", rootProject.properties.logisticsBranchKey
        resValue "string", "awsLoginTestUserName", rootProject.properties.awsLoginTestUserName
        resValue "string", "awsLoginTestUserPwd", rootProject.properties.awsLoginTestUserPwd
        resValue "string", "awsLoginTestExpectedPk", rootProject.properties.awsLoginTestExpectedPk
        if (rootProject.properties.servicesApiKey == null) throw new Exception("SERVICES_API_KEY is null")
        if (rootProject.properties.graphqlApiKey == null) throw new Exception("GRAPHQL_API_KEY is null")
        buildConfigField("String", "SERVICES_API_KEY", "\"${rootProject.properties.servicesApiKey}\"")
        buildConfigField("String", "GRAPHQL_API_KEY", "\"${rootProject.properties.graphqlApiKey}\"")
    }
    signingConfigs {
        release {
            storeFile file(project.properties.logisticsKeystorePath)
            storePassword project.properties.logisticsStorePassword
            keyAlias project.properties.logisticsKeyAlias
            keyPassword project.properties.logisticsKeyPassword
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig = signingConfigs.release
        }
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources true
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation "com.hypertrack:hypertrack:${versions.hypertrack_sdk}"
    implementation project(path: ':android-kotlin-geohash')

    kapt "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}"
    kaptTest "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}"

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:${versions.desugar_jdk_libs}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinx_coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinx_coroutines}"

    implementation "androidx.core:core-ktx:${versions.core_ktx}"
    implementation "androidx.appcompat:appcompat:${versions.appcompat}"
    implementation "androidx.recyclerview:recyclerview:${versions.recyclerview}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle_extensions}"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:${versions.swiperefreshlayout}"
    implementation "androidx.activity:activity-ktx:${versions.activity_ktx}"
    implementation "androidx.viewpager:viewpager:${versions.viewpager}"

    implementation "com.google.android.material:material:${versions.material}"
    implementation "com.google.android.libraries.places:places:${versions.google_places}"
    implementation "com.google.android.gms:play-services-ads-identifier:${versions.play_services_ads_identifier}"

    implementation "com.google.android.gms:play-services-location:${versions.play_services_location}"
    implementation "com.google.android.gms:play-services-maps:${versions.play_services_maps}"
    implementation "com.google.maps.android:android-maps-utils:${versions.android_maps_utils}"

    implementation "com.google.firebase:firebase-messaging:${versions.firebase_messaging}"
    implementation "com.google.firebase:firebase-crashlytics:${versions.firebase_crashlytics}"
    implementation "com.google.firebase:firebase-analytics:${versions.firebase_analytics}"
    implementation "com.google.firebase:firebase-appindexing:${versions.firebase_appindexing}"

    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle_livedata_ktx}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle_viewmodel_ktx}"

    implementation "androidx.navigation:navigation-fragment-ktx:${versions.nav_version}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.nav_version}"

    implementation "com.squareup.okhttp3:logging-interceptor:${versions.logging_interceptor}"
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit_converter_moshi}"
    implementation "com.squareup.retrofit2:converter-scalars:${versions.retrofit_converter_scalars}"
    implementation "com.squareup.moshi:moshi:${versions.moshi}"

    implementation "com.airbnb.android:lottie:${versions.lottie}"
    implementation "io.branch.sdk.android:library:${versions.branch}"
    implementation "com.amazonaws:aws-android-sdk-mobile-client:${versions.aws_android_sdk_mobile_client}"

    // test
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "androidx.test:core:${versions.androidx_test_core}"
    testImplementation "androidx.arch.core:core-testing:${versions.androidx_arch_core_testing}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.kotlinx_coroutines_test}"
    testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${versions.okhttp_mock_web_server}"
    testImplementation "io.mockk:mockk:${versions.mockk}"

    // androidTest
    androidTestImplementation "androidx.test.ext:junit:${versions.androidx_junit}"
    androidTestImplementation "androidx.test:rules:${versions.androidx_test_rules}"
    androidTestImplementation "androidx.test:runner:${versions.androidx_test_runner}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso_core}"
}

def codeFromVersionString(versionString) {

    def match = (versionString =~ /(\d+)\.(\d+)\.(\d+)(?:(?<snapshot>-SNAPSHOT)|(?<alpha>-alpha(?<alphaVersion>\d?))|(?<beta>-beta(?<betaVersion>\d?))|(?<rc>-rc(?<rcVersion>\d?)))?/)
    if (match) {
        println(versionString)
        def versionMajor = match.group(1).toInteger()
        def versionMinor = match.group(2).toInteger()
        def versionPatch = match.group(3).toInteger()
        def featureSuffix = 0
        if (match.group('rc')) {
            featureSuffice += 30
            featureSuffix += (match.group('rcVersion') ?: "0").toInteger()
        } else if (match.group('beta')) {
            featureSuffix += 20
            featureSuffix += (match.group('betaVersion') ?: "0").toInteger()
        } else if (match.group('alpha')) {
            featureSuffix += 10
            featureSuffix += (match.group('alphaVersion') ?: "0").toInteger()
        } else if (match.group('snapshot'))
            featureSuffix = 5
        return versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + featureSuffix
    } else {
        throw new Exception("Wrong version code")
    }
}

googleServices { disableVersionCheck = true }
